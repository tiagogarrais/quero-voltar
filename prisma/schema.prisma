generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo baseado no esquema recomendado para NextAuth + Prisma
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Usuario?  // Perfil do usuário (opcional)
  loja          Loja?     // Informações da loja (opcional)
}

model Usuario {
  id                String   @id @default(uuid())
  userId            String   @unique // Relacionamento 1:1 com User
  fullName          String?  // Nome completo editável
  birthDate         DateTime? // Data de nascimento
  cpf               String?  @unique // CPF único
  whatsapp          String?  // Número de WhatsApp (opcional)
  whatsappCountryCode String? @default("55") // Código DDI do país (padrão Brasil)
  whatsappConsent   Boolean  @default(false) // Consentimento para comunicações
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Loja {
  id                String   @id @default(uuid())
  userId            String   @unique // Relacionamento 1:1 com User
  cnpj              String?  @unique // CNPJ da loja
  cidade            String?  // Cidade da loja
  estado            String?  // Estado da loja
  nomeResponsavel   String?  // Nome completo do responsável
  telefoneResponsavel String? // Telefone do responsável
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
